---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: argo-cd
spec:
- template: Continuous Delivery
  phases:
  - phase: Continuous Delivery
    tasks:
    - name: Create Revision Branch
      type: github.CreateBranch
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      oldBranch: main
      newBranch: "revision_${NEW_TAG}"
    - name: Create Local Clone
      type: github.cloneRepository
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      repositoryUrl: "${GIT_REPO_URL}"
      localPath: "${LOCAL_GIT_CLONE_PATH}"
      branchName: "revision_${NEW_TAG}"
      removeExistingFolder: true
    - name: Update Manifest File
      type: kubernetes.updateManifest
      manifestPath: "${LOCAL_GIT_CLONE_PATH}/${GIT_REPO_NAME}/${MANIFEST_PATH_IN_GIT}/${MANIFEST_FILE}"
      imageUpdates:
        helloworld-container: "samuelblin/helloworld:${NEW_TAG}"
    - name: Commit And Push Changes
      type: github.commitFiles
      server: github
      localPath: "${LOCAL_GIT_CLONE_PATH}/${GIT_REPO_NAME}"
      files:
      - "${MANIFEST_PATH_IN_GIT}/${MANIFEST_FILE}"
      commitMessage: Updated image tag
      push: true
    - name: Create Pull Request
      type: github.CreatePullRequest
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      ^title: "${NEW_TAG} - Updated tag"
      base: main
      head: "revision_${NEW_TAG}"
      body: Updated tag
      pullRequestNumber: 0
      variableMapping:
        pythonScript.pullRequestNumber: "${PULL_REQUEST_NO}"
    - name: Merge Pull Request
      type: github.MergePullRequest
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      commitMessage: Approved Automation
      variableMapping:
        pythonScript.pullRequestNumber: "${PULL_REQUEST_NO}"
    - name: Wait for merge
      type: github.WaitForMerge
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      pollInterval: 10
      variableMapping:
        pythonScript.prid: "${PULL_REQUEST_NO}"
    - name: Sync Argo Application
      type: argocd.syncApplication
      argocdServer: argo-minikube
      appName: "${ARGO_APP_NAME}"
    - name: Get Application Sync Status
      type: argocd.getSyncStatus
      argocdServer: argo-minikube
      appName: "${ARGO_APP_NAME}"
    color: '#3d6c9e'
  variables:
  - type: xlrelease.StringVariable
    key: ARGO_APP_NAME
  - type: xlrelease.StringVariable
    key: NEW_TAG
  - type: xlrelease.StringVariable
    key: GIT_REPO_URL
  - type: xlrelease.StringVariable
    key: GIT_REPO_NAME
  - type: xlrelease.StringVariable
    key: LOCAL_GIT_CLONE_PATH
  - type: xlrelease.StringVariable
    key: MANIFEST_PATH_IN_GIT
  - type: xlrelease.StringVariable
    key: MANIFEST_FILE
  - type: xlrelease.IntegerVariable
    key: PULL_REQUEST_NO
  riskProfile: Default risk profile
- template: Environment Promotion
  phases:
  - phase: Promotion
    tasks:
    - name: Create Revision Branch
      type: github.CreateBranch
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      oldBranch: main
      newBranch: "revision_${NEW_TAG}"
    - name: Create Local Clone
      type: github.cloneRepository
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      repositoryUrl: "${GIT_REPO_URL}"
      localPath: "${LOCAL_GIT_CLONE_PATH}"
      branchName: "revision_${NEW_TAG}"
    - name: Update Manifest File
      type: kubernetes.updateManifest
      manifestPath: "${LOCAL_GIT_CLONE_PATH}/${GIT_REPO_NAME}/${MANIFEST_PATH_IN_GIT}/${MANIFEST_FILE}"
      imageUpdates:
        ${CONTAINER_NAME}: "samuelblin/helloworld:${NEW_TAG}"
    - name: Commit And Push Changes
      type: github.commitFiles
      server: github
      localPath: "${LOCAL_GIT_CLONE_PATH}/${GIT_REPO_NAME}"
      files:
      - "${MANIFEST_PATH_IN_GIT}/${MANIFEST_FILE}"
      commitMessage: Updated image tag
      push: true
    - name: Create Pull Request
      type: github.CreatePullRequest
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      ^title: "${NEW_TAG} - Updated tag"
      base: main
      head: "revision_${NEW_TAG}"
      body: Updated tag
      pullRequestNumber: 0
      variableMapping:
        pythonScript.pullRequestNumber: "${PULL_REQUEST_NO}"
    - name: Merge Pull Request
      type: github.MergePullRequest
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      commitMessage: Approved Automation
      variableMapping:
        pythonScript.pullRequestNumber: "${PULL_REQUEST_NO}"
    - name: Wait for merge
      type: github.WaitForMerge
      server: github
      repositoryName: "${GIT_REPO_NAME}"
      pollInterval: 10
      variableMapping:
        pythonScript.prid: "${PULL_REQUEST_NO}"
    - name: Sync Argo Application
      type: argocd.syncApplication
      argocdServer: argo-minikube
      appName: "${ARGO_APP_NAME}"
    - name: Get Application Sync Status
      type: argocd.getSyncStatus
      argocdServer: argo-minikube
      appName: "${ARGO_APP_NAME}"
    color: '#3d6c9e'
  variables:
  - type: xlrelease.StringVariable
    key: ARGO_APP_NAME
  - type: xlrelease.StringVariable
    key: NEW_TAG
  - type: xlrelease.StringVariable
    key: GIT_REPO_URL
  - type: xlrelease.StringVariable
    key: GIT_REPO_NAME
  - type: xlrelease.StringVariable
    key: LOCAL_GIT_CLONE_PATH
  - type: xlrelease.StringVariable
    key: MANIFEST_PATH_IN_GIT
  - type: xlrelease.StringVariable
    key: MANIFEST_FILE
  - type: xlrelease.IntegerVariable
    key: PULL_REQUEST_NO
  - type: xlrelease.StringVariable
    key: CONTAINER_NAME
  riskProfile: Default risk profile
